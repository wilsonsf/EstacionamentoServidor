/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package io.swagger.client.api

import io.swagger.client.model.Vaga
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object PainelApi {

  /**
   * Retorna o número de minutos, se aplicavel
   * 
   * Expected answers:
   *   code 200 : Vaga (successful operation)
   *   code 400 :  (Invalid ID supplied)
   *   code 404 :  (Vaga not found)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param vagaId ID da vaga para retornar
   */
  def getTempoVagaById(vagaId: Long)(implicit apiKey: ApiKeyValue): ApiRequest[Vaga] =
    ApiRequest[Vaga](ApiMethods.GET, "https://virtserver.swaggerhub.com/Parking-lot/Estacionamento/1.0.0", "/vaga/tempo/{vagaId}", "application/json")
      .withApiKey(apiKey, "api_key", HEADER)
      .withPathParam("vagaId", vagaId)
      .withSuccessResponse[Vaga](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
        /**
   * Retorna uma única vaga
   * 
   * Expected answers:
   *   code 200 : Vaga (successful operation)
   *   code 400 :  (Invalid ID supplied)
   *   code 404 :  (Vaga not found)
   * 
   * Available security schemes:
   *   api_key (apiKey)
   * 
   * @param vagaId ID da vaga para retornar
   */
  def getVagaById(vagaId: Long)(implicit apiKey: ApiKeyValue): ApiRequest[Vaga] =
    ApiRequest[Vaga](ApiMethods.GET, "https://virtserver.swaggerhub.com/Parking-lot/Estacionamento/1.0.0", "/vaga/{vagaId}", "application/json")
      .withApiKey(apiKey, "api_key", HEADER)
      .withPathParam("vagaId", vagaId)
      .withSuccessResponse[Vaga](200)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](404)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Seq[Vaga] (successful operation)
   *   code 400 :  (Nenhuma vaga ocupada)
   */
  def queueBusyVaga(): ApiRequest[Seq[Vaga]] =
    ApiRequest[Seq[Vaga]](ApiMethods.GET, "https://virtserver.swaggerhub.com/Parking-lot/Estacionamento/1.0.0", "/vaga/ocupada", "application/json")
      .withSuccessResponse[Seq[Vaga]](200)
      .withErrorResponse[Unit](400)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Seq[Vaga] (successful operation)
   *   code 400 :  (Nenhuma vaga ocupada)
   */
  def queueFreeVaga(): ApiRequest[Seq[Vaga]] =
    ApiRequest[Seq[Vaga]](ApiMethods.GET, "https://virtserver.swaggerhub.com/Parking-lot/Estacionamento/1.0.0", "/vaga/desocupada", "application/json")
      .withSuccessResponse[Seq[Vaga]](200)
      .withErrorResponse[Unit](400)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Int (successful operation)
   *   code 400 :  (Nenhuma vaga ocupada)
   */
  def queueFreeVagaAmount(): ApiRequest[Int] =
    ApiRequest[Int](ApiMethods.GET, "https://virtserver.swaggerhub.com/Parking-lot/Estacionamento/1.0.0", "/vaga/desocupada/quantidade", "application/json")
      .withSuccessResponse[Int](200)
      .withErrorResponse[Unit](400)
        /**
   * 
   * 
   * Expected answers:
   *   code 200 : Seq[Vaga] (successful operation)
   *   code 400 :  (Nenhuma vaga cadastrada)
   */
  def queueVaga(): ApiRequest[Seq[Vaga]] =
    ApiRequest[Seq[Vaga]](ApiMethods.GET, "https://virtserver.swaggerhub.com/Parking-lot/Estacionamento/1.0.0", "/vaga", "application/json")
      .withSuccessResponse[Seq[Vaga]](200)
      .withErrorResponse[Unit](400)
      

}

